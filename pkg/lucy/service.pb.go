// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.13.0
// source: lucy_proto/service.proto

package lucy

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	cereal "github.com/illuscio-dev/protoCereal-go/cereal"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_lucy_proto_service_proto protoreflect.FileDescriptor

var file_lucy_proto_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x75, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x75, 0x63, 0x79,
	0x1a, 0x17, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75,
	0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6c, 0x75, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x6c, 0x75, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6c, 0x75, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xf7, 0x04, 0x0a, 0x04, 0x4c, 0x75, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e,
	0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x12, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0c, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x0b, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x6c, 0x75, 0x63,
	0x79, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x0d, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e, 0x4e,
	0x65, 0x77, 0x4a, 0x6f, 0x62, 0x73, 0x1a, 0x11, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x12, 0x0c, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x1a, 0x09, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x12, 0x2d, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x0c, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x6c, 0x75, 0x63,
	0x79, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6c, 0x75, 0x63, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x6c, 0x75, 0x63, 0x79,
	0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x6c, 0x75, 0x63,
	0x79, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x0c, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x31, 0x30,
	0x30, 0x2f, 0x6c, 0x75, 0x63, 0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_lucy_proto_service_proto_goTypes = []interface{}{
	(*NewBatch)(nil),      // 0: lucy.NewBatch
	(*cereal.UUID)(nil),   // 1: cereal.UUID
	(*empty.Empty)(nil),   // 2: google.protobuf.Empty
	(*NewJobs)(nil),       // 3: lucy.NewJobs
	(*StartStage)(nil),    // 4: lucy.StartStage
	(*ProgressStage)(nil), // 5: lucy.ProgressStage
	(*CompleteStage)(nil), // 6: lucy.CompleteStage
	(*RunnerUpdate)(nil),  // 7: lucy.RunnerUpdate
	(*CancelBatches)(nil), // 8: lucy.CancelBatches
	(*CreatedBatch)(nil),  // 9: lucy.CreatedBatch
	(*Batch)(nil),         // 10: lucy.Batch
	(*CreatedJobs)(nil),   // 11: lucy.CreatedJobs
	(*Job)(nil),           // 12: lucy.Job
	(*BatchJobs)(nil),     // 13: lucy.BatchJobs
}
var file_lucy_proto_service_proto_depIdxs = []int32{
	0,  // 0: lucy.Lucy.CreateBatch:input_type -> lucy.NewBatch
	1,  // 1: lucy.Lucy.GetBatch:input_type -> cereal.UUID
	2,  // 2: lucy.Lucy.ListBatches:input_type -> google.protobuf.Empty
	3,  // 3: lucy.Lucy.CreateJobs:input_type -> lucy.NewJobs
	1,  // 4: lucy.Lucy.GetJob:input_type -> cereal.UUID
	1,  // 5: lucy.Lucy.GetBatchJobs:input_type -> cereal.UUID
	4,  // 6: lucy.Lucy.StartStage:input_type -> lucy.StartStage
	5,  // 7: lucy.Lucy.ProgressStage:input_type -> lucy.ProgressStage
	6,  // 8: lucy.Lucy.CompleteStage:input_type -> lucy.CompleteStage
	7,  // 9: lucy.Lucy.Runner:input_type -> lucy.RunnerUpdate
	8,  // 10: lucy.Lucy.CancelBatches:input_type -> lucy.CancelBatches
	1,  // 11: lucy.Lucy.CancelJob:input_type -> cereal.UUID
	9,  // 12: lucy.Lucy.CreateBatch:output_type -> lucy.CreatedBatch
	10, // 13: lucy.Lucy.GetBatch:output_type -> lucy.Batch
	10, // 14: lucy.Lucy.ListBatches:output_type -> lucy.Batch
	11, // 15: lucy.Lucy.CreateJobs:output_type -> lucy.CreatedJobs
	12, // 16: lucy.Lucy.GetJob:output_type -> lucy.Job
	13, // 17: lucy.Lucy.GetBatchJobs:output_type -> lucy.BatchJobs
	2,  // 18: lucy.Lucy.StartStage:output_type -> google.protobuf.Empty
	2,  // 19: lucy.Lucy.ProgressStage:output_type -> google.protobuf.Empty
	2,  // 20: lucy.Lucy.CompleteStage:output_type -> google.protobuf.Empty
	2,  // 21: lucy.Lucy.Runner:output_type -> google.protobuf.Empty
	2,  // 22: lucy.Lucy.CancelBatches:output_type -> google.protobuf.Empty
	2,  // 23: lucy.Lucy.CancelJob:output_type -> google.protobuf.Empty
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_lucy_proto_service_proto_init() }
func file_lucy_proto_service_proto_init() {
	if File_lucy_proto_service_proto != nil {
		return
	}
	file_lucy_proto_create_proto_init()
	file_lucy_proto_jobs_proto_init()
	file_lucy_proto_updates_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lucy_proto_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lucy_proto_service_proto_goTypes,
		DependencyIndexes: file_lucy_proto_service_proto_depIdxs,
	}.Build()
	File_lucy_proto_service_proto = out.File
	file_lucy_proto_service_proto_rawDesc = nil
	file_lucy_proto_service_proto_goTypes = nil
	file_lucy_proto_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LucyClient is the client API for Lucy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LucyClient interface {
	// CreateBatch creates a new batch.
	CreateBatch(ctx context.Context, in *NewBatch, opts ...grpc.CallOption) (*CreatedBatch, error)
	// Batch returns a single batch for a given id.
	GetBatch(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*Batch, error)
	// List batches lists all batches from newest to oldest.
	ListBatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Lucy_ListBatchesClient, error)
	// CreateJob creates a new job and returns an id for fetching it.
	CreateJobs(ctx context.Context, in *NewJobs, opts ...grpc.CallOption) (*CreatedJobs, error)
	// GetJob fetches a single job.
	GetJob(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*Job, error)
	// GetBatchJobs returns the jobs for a given batch.
	GetBatchJobs(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*BatchJobs, error)
	// StartStage starts a job stage.
	StartStage(ctx context.Context, in *StartStage, opts ...grpc.CallOption) (*empty.Empty, error)
	// ProgressStage updates the progress on a stage.
	ProgressStage(ctx context.Context, in *ProgressStage, opts ...grpc.CallOption) (*empty.Empty, error)
	// CompleteStage completes a stage with result data.
	CompleteStage(ctx context.Context, in *CompleteStage, opts ...grpc.CallOption) (*empty.Empty, error)
	// RunnerUpdate allows a job runner to stream updates to Lucy, removing the overhead
	// of making individual rpc requests for every update.
	//
	// The stage_id of the first message MUST be set, but subsequent messages can omit
	// the id when updating the same stage.
	//
	// Progress updates to the DB are captured and throttled, allowing only 12 updates
	// per second to reduce load on the DB. The service will trap progress updates, then
	// once every 1/12th of a second, send the latest received to the DB.
	//
	// If an error occurs, the details on the pkerr.Error will include the number of the
	// update that caused the error. Update numbers start at 0, and are tracked in order
	// as they are received.
	//
	// It is recommended that each stream only be sent a single job at a time, though this
	// recommendation is not enforced. For workers running multiple jobs in parallel,
	// consider opening a separate Runner for each parallel job.
	//
	// When The server receives a confirm request, it will send back an emtpy message
	// confirming that all previously sent requests have been processed without error.
	Runner(ctx context.Context, opts ...grpc.CallOption) (Lucy_RunnerClient, error)
	// CancelBatch cancels all jobs in the passed batches.
	CancelBatches(ctx context.Context, in *CancelBatches, opts ...grpc.CallOption) (*empty.Empty, error)
	// CancelJobs cancels all jobs listed.
	CancelJob(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*empty.Empty, error)
}

type lucyClient struct {
	cc grpc.ClientConnInterface
}

func NewLucyClient(cc grpc.ClientConnInterface) LucyClient {
	return &lucyClient{cc}
}

func (c *lucyClient) CreateBatch(ctx context.Context, in *NewBatch, opts ...grpc.CallOption) (*CreatedBatch, error) {
	out := new(CreatedBatch)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/CreateBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) GetBatch(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/GetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) ListBatches(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Lucy_ListBatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Lucy_serviceDesc.Streams[0], "/lucy.Lucy/ListBatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &lucyListBatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lucy_ListBatchesClient interface {
	Recv() (*Batch, error)
	grpc.ClientStream
}

type lucyListBatchesClient struct {
	grpc.ClientStream
}

func (x *lucyListBatchesClient) Recv() (*Batch, error) {
	m := new(Batch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lucyClient) CreateJobs(ctx context.Context, in *NewJobs, opts ...grpc.CallOption) (*CreatedJobs, error) {
	out := new(CreatedJobs)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/CreateJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) GetJob(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) GetBatchJobs(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*BatchJobs, error) {
	out := new(BatchJobs)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/GetBatchJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) StartStage(ctx context.Context, in *StartStage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/StartStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) ProgressStage(ctx context.Context, in *ProgressStage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/ProgressStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) CompleteStage(ctx context.Context, in *CompleteStage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/CompleteStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) Runner(ctx context.Context, opts ...grpc.CallOption) (Lucy_RunnerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Lucy_serviceDesc.Streams[1], "/lucy.Lucy/Runner", opts...)
	if err != nil {
		return nil, err
	}
	x := &lucyRunnerClient{stream}
	return x, nil
}

type Lucy_RunnerClient interface {
	Send(*RunnerUpdate) error
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type lucyRunnerClient struct {
	grpc.ClientStream
}

func (x *lucyRunnerClient) Send(m *RunnerUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lucyRunnerClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lucyClient) CancelBatches(ctx context.Context, in *CancelBatches, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/CancelBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lucyClient) CancelJob(ctx context.Context, in *cereal.UUID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lucy.Lucy/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LucyServer is the server API for Lucy service.
type LucyServer interface {
	// CreateBatch creates a new batch.
	CreateBatch(context.Context, *NewBatch) (*CreatedBatch, error)
	// Batch returns a single batch for a given id.
	GetBatch(context.Context, *cereal.UUID) (*Batch, error)
	// List batches lists all batches from newest to oldest.
	ListBatches(*empty.Empty, Lucy_ListBatchesServer) error
	// CreateJob creates a new job and returns an id for fetching it.
	CreateJobs(context.Context, *NewJobs) (*CreatedJobs, error)
	// GetJob fetches a single job.
	GetJob(context.Context, *cereal.UUID) (*Job, error)
	// GetBatchJobs returns the jobs for a given batch.
	GetBatchJobs(context.Context, *cereal.UUID) (*BatchJobs, error)
	// StartStage starts a job stage.
	StartStage(context.Context, *StartStage) (*empty.Empty, error)
	// ProgressStage updates the progress on a stage.
	ProgressStage(context.Context, *ProgressStage) (*empty.Empty, error)
	// CompleteStage completes a stage with result data.
	CompleteStage(context.Context, *CompleteStage) (*empty.Empty, error)
	// RunnerUpdate allows a job runner to stream updates to Lucy, removing the overhead
	// of making individual rpc requests for every update.
	//
	// The stage_id of the first message MUST be set, but subsequent messages can omit
	// the id when updating the same stage.
	//
	// Progress updates to the DB are captured and throttled, allowing only 12 updates
	// per second to reduce load on the DB. The service will trap progress updates, then
	// once every 1/12th of a second, send the latest received to the DB.
	//
	// If an error occurs, the details on the pkerr.Error will include the number of the
	// update that caused the error. Update numbers start at 0, and are tracked in order
	// as they are received.
	//
	// It is recommended that each stream only be sent a single job at a time, though this
	// recommendation is not enforced. For workers running multiple jobs in parallel,
	// consider opening a separate Runner for each parallel job.
	//
	// When The server receives a confirm request, it will send back an emtpy message
	// confirming that all previously sent requests have been processed without error.
	Runner(Lucy_RunnerServer) error
	// CancelBatch cancels all jobs in the passed batches.
	CancelBatches(context.Context, *CancelBatches) (*empty.Empty, error)
	// CancelJobs cancels all jobs listed.
	CancelJob(context.Context, *cereal.UUID) (*empty.Empty, error)
}

// UnimplementedLucyServer can be embedded to have forward compatible implementations.
type UnimplementedLucyServer struct {
}

func (*UnimplementedLucyServer) CreateBatch(context.Context, *NewBatch) (*CreatedBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatch not implemented")
}
func (*UnimplementedLucyServer) GetBatch(context.Context, *cereal.UUID) (*Batch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (*UnimplementedLucyServer) ListBatches(*empty.Empty, Lucy_ListBatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBatches not implemented")
}
func (*UnimplementedLucyServer) CreateJobs(context.Context, *NewJobs) (*CreatedJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobs not implemented")
}
func (*UnimplementedLucyServer) GetJob(context.Context, *cereal.UUID) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedLucyServer) GetBatchJobs(context.Context, *cereal.UUID) (*BatchJobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchJobs not implemented")
}
func (*UnimplementedLucyServer) StartStage(context.Context, *StartStage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStage not implemented")
}
func (*UnimplementedLucyServer) ProgressStage(context.Context, *ProgressStage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgressStage not implemented")
}
func (*UnimplementedLucyServer) CompleteStage(context.Context, *CompleteStage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteStage not implemented")
}
func (*UnimplementedLucyServer) Runner(Lucy_RunnerServer) error {
	return status.Errorf(codes.Unimplemented, "method Runner not implemented")
}
func (*UnimplementedLucyServer) CancelBatches(context.Context, *CancelBatches) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBatches not implemented")
}
func (*UnimplementedLucyServer) CancelJob(context.Context, *cereal.UUID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}

func RegisterLucyServer(s *grpc.Server, srv LucyServer) {
	s.RegisterService(&_Lucy_serviceDesc, srv)
}

func _Lucy_CreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).CreateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/CreateBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).CreateBatch(ctx, req.(*NewBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cereal.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/GetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).GetBatch(ctx, req.(*cereal.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_ListBatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LucyServer).ListBatches(m, &lucyListBatchesServer{stream})
}

type Lucy_ListBatchesServer interface {
	Send(*Batch) error
	grpc.ServerStream
}

type lucyListBatchesServer struct {
	grpc.ServerStream
}

func (x *lucyListBatchesServer) Send(m *Batch) error {
	return x.ServerStream.SendMsg(m)
}

func _Lucy_CreateJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).CreateJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/CreateJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).CreateJobs(ctx, req.(*NewJobs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cereal.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).GetJob(ctx, req.(*cereal.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_GetBatchJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cereal.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).GetBatchJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/GetBatchJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).GetBatchJobs(ctx, req.(*cereal.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_StartStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).StartStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/StartStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).StartStage(ctx, req.(*StartStage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_ProgressStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressStage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).ProgressStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/ProgressStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).ProgressStage(ctx, req.(*ProgressStage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_CompleteStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).CompleteStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/CompleteStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).CompleteStage(ctx, req.(*CompleteStage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_Runner_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LucyServer).Runner(&lucyRunnerServer{stream})
}

type Lucy_RunnerServer interface {
	Send(*empty.Empty) error
	Recv() (*RunnerUpdate, error)
	grpc.ServerStream
}

type lucyRunnerServer struct {
	grpc.ServerStream
}

func (x *lucyRunnerServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lucyRunnerServer) Recv() (*RunnerUpdate, error) {
	m := new(RunnerUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Lucy_CancelBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBatches)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).CancelBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/CancelBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).CancelBatches(ctx, req.(*CancelBatches))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lucy_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cereal.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LucyServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucy.Lucy/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LucyServer).CancelJob(ctx, req.(*cereal.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lucy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lucy.Lucy",
	HandlerType: (*LucyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBatch",
			Handler:    _Lucy_CreateBatch_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _Lucy_GetBatch_Handler,
		},
		{
			MethodName: "CreateJobs",
			Handler:    _Lucy_CreateJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Lucy_GetJob_Handler,
		},
		{
			MethodName: "GetBatchJobs",
			Handler:    _Lucy_GetBatchJobs_Handler,
		},
		{
			MethodName: "StartStage",
			Handler:    _Lucy_StartStage_Handler,
		},
		{
			MethodName: "ProgressStage",
			Handler:    _Lucy_ProgressStage_Handler,
		},
		{
			MethodName: "CompleteStage",
			Handler:    _Lucy_CompleteStage_Handler,
		},
		{
			MethodName: "CancelBatches",
			Handler:    _Lucy_CancelBatches_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Lucy_CancelJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBatches",
			Handler:       _Lucy_ListBatches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Runner",
			Handler:       _Lucy_Runner_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lucy_proto/service.proto",
}
